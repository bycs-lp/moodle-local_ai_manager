{"version":3,"file":"config.min.js","sources":["../src/config.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module handling the retrieving of the ai config object.\n *\n * @module     local_ai_manager/config\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport {exception as displayException} from 'core/notification';\n\n\nlet aiConfig = null;\nlet aiInfo = null;\nlet selectedPurposes = null;\n\n/**\n * Make a request for retrieving the purpose configuration for current tenant.\n *\n * @param {int} contextid the id of the context for which we need the ai configuration\n * @param {string} tenant the tenant identifier or null, if the tenant of the user should be used\n * @param {array} purposes array of purpose strings\n */\nconst fetchAiConfig = (contextid, tenant = null, purposes) => fetchMany([{\n    methodname: 'local_ai_manager_get_ai_config',\n    args: {\n        contextid,\n        tenant,\n        purposes\n    },\n}])[0];\n\n/**\n * Make a request for retrieving general information for the current tenant.\n *\n * @param {string} tenant the tenant identifier or null, if the tenant of the user should be used\n */\nconst fetchAiInfo = (tenant = null) => fetchMany([{\n    methodname: 'local_ai_manager_get_ai_info',\n    args: {\n        tenant,\n    },\n}])[0];\n\nconst fetchPurposeOptions = (purpose) => fetchMany([{\n    methodname: 'local_ai_manager_get_purpose_options',\n    args: {\n        purpose\n    },\n}])[0];\n\n/**\n * Executes the call that returns the AI config object with detailed user specific configuration.\n *\n * @param {int} contextid the id of the context for which we need the ai configuration\n * @param {string} tenant the tenant identifier or null, if the tenant of the user should be used\n * @param {array} purposes array of purpose strings\n */\nexport const getAiConfig = async(contextid, tenant = null, purposes = []) => {\n    if (aiConfig === null || purposes !== selectedPurposes) {\n        // Store purposes, so we can detect if another call requests different purposes.\n        selectedPurposes = purposes;\n        aiConfig = await fetchAiConfig(contextid, tenant, purposes);\n    }\n    return aiConfig;\n};\n\n/**\n * Executes the call to get the general info object.\n *\n * @param {string} tenant the tenant identifier or null, if the tenant of the user should be used\n */\nexport const getAiInfo = async(tenant = null) => {\n    if (aiInfo === null) {\n        aiInfo = await fetchAiInfo(tenant);\n    }\n    return aiInfo;\n};\n\nexport const getPurposeOptions = async(purpose) => {\n    let purposeOptions = null;\n    try {\n        purposeOptions = await fetchPurposeOptions(purpose);\n    } catch (exception) {\n        await displayException(exception);\n    }\n    return purposeOptions;\n};\n"],"names":["aiConfig","aiInfo","selectedPurposes","fetchAiConfig","contextid","tenant","purposes","methodname","args","fetchAiInfo","async","purposeOptions","purpose","fetchPurposeOptions","exception"],"mappings":";;;;;;;;;IA4BIA,SAAW,KACXC,OAAS,KACTC,iBAAmB,WASjBC,cAAgB,SAACC,eAAWC,8DAAS,KAAMC,uDAAa,cAAU,CAAC,CACrEC,WAAY,iCACZC,KAAM,CACFJ,UAAAA,UACAC,OAAAA,OACAC,SAAAA,aAEJ,IAOEG,YAAc,eAACJ,8DAAS,YAAS,cAAU,CAAC,CAC9CE,WAAY,+BACZC,KAAM,CACFH,OAAAA,WAEJ,yBAgBuBK,eAAMN,eAAWC,8DAAS,KAAMC,gEAAW,UACjD,OAAbN,UAAqBM,WAAaJ,mBAElCA,iBAAmBI,SACnBN,eAAiBG,cAAcC,UAAWC,OAAQC,WAE/CN,6BAQcU,qBAAML,8DAAS,YACrB,OAAXJ,SACAA,aAAeQ,YAAYJ,SAExBJ,mCAGsBS,MAAAA,cACzBC,eAAiB,SAEjBA,oBAtCqBC,CAAAA,UAAY,cAAU,CAAC,CAChDL,WAAY,uCACZC,KAAM,CACFI,QAAAA,YAEJ,GAiC2BC,CAAoBD,SAC7C,MAAOE,iBACC,2BAAiBA,kBAEpBH"}