{"version":3,"file":"statistics_table.min.js","sources":["../src/statistics_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module handling the form submission of the statistics tables of local_ai_manager.\n *\n * @module     local_ai_manager/statistics_table\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\n\nexport const selectors = {\n    CHECKBOX: 'input[data-userid]',\n    USERIDS_INPUT_FIELD: '#statistics-table-userids'\n};\n\n/**\n * Initialize the bulk handling on the statistics table.\n * @param {string} id the id of the table to operate on\n */\nexport const init = (id) => {\n    const pendingPromise = new Pending('local_ai_manager/statistics_table');\n    const table = document.getElementById(id);\n    table.querySelectorAll(selectors.CHECKBOX).forEach(checkbox => {\n        checkbox.addEventListener('change', event => {\n            updateUserIds(event.target);\n        });\n    });\n    pendingPromise.resolve();\n};\n\n/**\n * Update the user ids.\n *\n * @param {string} checkbox the checkbox object which has been changed\n */\nconst updateUserIds = (checkbox) => {\n    const userIdsInputField = document.querySelector(selectors.USERIDS_INPUT_FIELD);\n    const currentValue = userIdsInputField.value.trim().length === 0 ? '' : userIdsInputField.value.trim();\n    const currentUserIds = currentValue.length === 0 ? [] : currentValue.split(';');\n    const userid = checkbox.dataset.userid;\n    if (checkbox.checked && !currentUserIds.includes(userid)) {\n        currentUserIds.push(checkbox.dataset.userid);\n    }\n    if (!checkbox.checked && currentUserIds.includes(userid)) {\n        const index = currentUserIds.indexOf(userid);\n        currentUserIds.splice(index, 1); // Remove item.\n    }\n    userIdsInputField.value = currentUserIds.join(';');\n};\n"],"names":["selectors","CHECKBOX","USERIDS_INPUT_FIELD","id","pendingPromise","Pending","document","getElementById","querySelectorAll","forEach","checkbox","addEventListener","event","updateUserIds","target","resolve","userIdsInputField","querySelector","currentValue","value","trim","length","currentUserIds","split","userid","dataset","checked","includes","push","index","indexOf","splice","join"],"mappings":";;;;;;;;qKA0BaA,UAAY,CACrBC,SAAU,qBACVC,oBAAqB,wEAOJC,WACXC,eAAiB,IAAIC,iBAAQ,qCACrBC,SAASC,eAAeJ,IAChCK,iBAAiBR,UAAUC,UAAUQ,SAAQC,WAC/CA,SAASC,iBAAiB,UAAUC,QAChCC,cAAcD,MAAME,cAG5BV,eAAeW,iBAQbF,cAAiBH,iBACbM,kBAAoBV,SAASW,cAAcjB,UAAUE,qBACrDgB,aAAyD,IAA1CF,kBAAkBG,MAAMC,OAAOC,OAAe,GAAKL,kBAAkBG,MAAMC,OAC1FE,eAAyC,IAAxBJ,aAAaG,OAAe,GAAKH,aAAaK,MAAM,KACrEC,OAASd,SAASe,QAAQD,UAC5Bd,SAASgB,UAAYJ,eAAeK,SAASH,SAC7CF,eAAeM,KAAKlB,SAASe,QAAQD,SAEpCd,SAASgB,SAAWJ,eAAeK,SAASH,QAAS,OAChDK,MAAQP,eAAeQ,QAAQN,QACrCF,eAAeS,OAAOF,MAAO,GAEjCb,kBAAkBG,MAAQG,eAAeU,KAAK"}