{"version":3,"file":"rights_config_table.min.js","sources":["../src/rights_config_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module handling the form submission of the statistics tables of local_ai_manager.\n *\n * @module     local_ai_manager/rights_config_table\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Pending from 'core/pending';\n\nlet table = null;\n\nexport const selectors = {\n    CHECKBOX: 'input[data-userid]',\n    SELECTALLCHECKBOX: '#rights-table-selectall_checkbox',\n    USERIDS_INPUT_FIELD: '#rights-table-userids'\n};\n\n/**\n * Initialize the bulk handling on the statistics table.\n * @param {string} id the id of the table to operate on\n */\nexport const init = (id) => {\n    const pendingPromise = new Pending('local_ai_manager/rights_config_table');\n    table = document.getElementById(id);\n    table.querySelectorAll(selectors.CHECKBOX).forEach(checkbox => {\n        checkbox.addEventListener('change', event => {\n            updateUserIds(event.target);\n        });\n    });\n    table.querySelector(selectors.SELECTALLCHECKBOX).addEventListener('change', event => {\n        updateSelection(event);\n    });\n    pendingPromise.resolve();\n};\n\n/**\n * Update the user ids.\n *\n * @param {string} checkbox the checkbox object which has been changed\n */\nconst updateUserIds = (checkbox) => {\n    const userIdsInputField = document.querySelector(selectors.USERIDS_INPUT_FIELD);\n    const currentValue = userIdsInputField.value.trim().length === 0 ? '' : userIdsInputField.value.trim();\n    const currentUserIds = currentValue.length === 0 ? [] : currentValue.split(';');\n    const userid = checkbox.dataset.userid;\n    if (checkbox.checked && !currentUserIds.includes(userid)) {\n        currentUserIds.push(checkbox.dataset.userid);\n    }\n    if (!checkbox.checked && currentUserIds.includes(userid)) {\n        const index = currentUserIds.indexOf(userid);\n        currentUserIds.splice(index, 1); // Remove item.\n    }\n    userIdsInputField.value = currentUserIds.join(';');\n    updateSelectAllCheckboxState();\n};\n\n/**\n * Updates the checked states of the user checkboxes according to the change of the \"select/deselect all\" checkbox.\n *\n * @param {object} changedEvent the changed event of the \"select/deselect all\" checkbox\n */\nconst updateSelection = (changedEvent) => {\n    const allBoxes = table.querySelectorAll(selectors.CHECKBOX);\n    if (allBoxes.length === 0) {\n        return;\n    }\n    if (changedEvent.target.checked) {\n            allBoxes.forEach((box) => {\n                if (!box.checked) {\n                    box.checked = true;\n                }\n            });\n    } else {\n        allBoxes.forEach((box) => {\n            box.checked = false;\n        });\n    }\n};\n\n/**\n * Updates the \"select/deselect all\" checkbox according to the state of the other checkboxes.\n */\nconst updateSelectAllCheckboxState = () => {\n    const selectAllCheckbox = table.querySelector(selectors.SELECTALLCHECKBOX);\n    selectAllCheckbox.checked = !!areAllBoxesChecked();\n};\n\n/**\n * Helper function to determine if all user checkboxes are checked or not.\n *\n * @returns {bool} true if all boxes are checked, false otherwise\n */\nconst areAllBoxesChecked = () => {\n    const allBoxes = table.querySelectorAll(selectors.CHECKBOX);\n    return Array.from(allBoxes).reduce((a, b) => a && b.checked, true);\n};\n"],"names":["table","selectors","CHECKBOX","SELECTALLCHECKBOX","USERIDS_INPUT_FIELD","id","pendingPromise","Pending","document","getElementById","querySelectorAll","forEach","checkbox","addEventListener","event","updateUserIds","target","querySelector","updateSelection","resolve","userIdsInputField","currentValue","value","trim","length","currentUserIds","split","userid","dataset","checked","includes","push","index","indexOf","splice","join","updateSelectAllCheckboxState","changedEvent","allBoxes","box","areAllBoxesChecked","Array","from","reduce","a","b"],"mappings":";;;;;;;;mKA0BIA,MAAQ,WAECC,UAAY,CACrBC,SAAU,qBACVC,kBAAmB,mCACnBC,oBAAqB,oEAOJC,WACXC,eAAiB,IAAIC,iBAAQ,wCACnCP,MAAQQ,SAASC,eAAeJ,IAChCL,MAAMU,iBAAiBT,UAAUC,UAAUS,SAAQC,WAC/CA,SAASC,iBAAiB,UAAUC,QAChCC,cAAcD,MAAME,cAG5BhB,MAAMiB,cAAchB,UAAUE,mBAAmBU,iBAAiB,UAAUC,QACxEI,gBAAgBJ,UAEpBR,eAAea,iBAQbJ,cAAiBH,iBACbQ,kBAAoBZ,SAASS,cAAchB,UAAUG,qBACrDiB,aAAyD,IAA1CD,kBAAkBE,MAAMC,OAAOC,OAAe,GAAKJ,kBAAkBE,MAAMC,OAC1FE,eAAyC,IAAxBJ,aAAaG,OAAe,GAAKH,aAAaK,MAAM,KACrEC,OAASf,SAASgB,QAAQD,UAC5Bf,SAASiB,UAAYJ,eAAeK,SAASH,SAC7CF,eAAeM,KAAKnB,SAASgB,QAAQD,SAEpCf,SAASiB,SAAWJ,eAAeK,SAASH,QAAS,OAChDK,MAAQP,eAAeQ,QAAQN,QACrCF,eAAeS,OAAOF,MAAO,GAEjCZ,kBAAkBE,MAAQG,eAAeU,KAAK,KAC9CC,gCAQElB,gBAAmBmB,qBACfC,SAAWtC,MAAMU,iBAAiBT,UAAUC,UAC1B,IAApBoC,SAASd,SAGTa,aAAarB,OAAOa,QAChBS,SAAS3B,SAAS4B,MACTA,IAAIV,UACLU,IAAIV,SAAU,MAI1BS,SAAS3B,SAAS4B,MACdA,IAAIV,SAAU,OAQpBO,6BAA+B,KACPpC,MAAMiB,cAAchB,UAAUE,mBACtC0B,UAAYW,sBAQ5BA,mBAAqB,WACjBF,SAAWtC,MAAMU,iBAAiBT,UAAUC,iBAC3CuC,MAAMC,KAAKJ,UAAUK,QAAO,CAACC,EAAGC,IAAMD,GAAKC,EAAEhB,UAAS"}