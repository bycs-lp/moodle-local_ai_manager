{"version":3,"file":"instanceaddmodal.min.js","sources":["../src/instanceaddmodal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module handling for adding a new AI tool.\n *\n * @module     local_ai_manager/instanceaddmodal\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getAiInfo} from 'local_ai_manager/config';\nimport {getStrings} from 'core/str';\nimport Modal from 'core/modal';\n\nexport const renderInstanceAddModal = async(instanceTableSelector) => {\n    const instanceTable = document.querySelector(instanceTableSelector);\n    const aiInfo = await getAiInfo(instanceTable.dataset.tenant);\n    const toolsContext = [];\n    const pluginnameStringsToFetch = [];\n    aiInfo.tools.forEach((tool) => {\n        pluginnameStringsToFetch.push({key: 'pluginname', component: 'aitool_' + tool.name});\n    });\n    const pluginNameStrings = await getStrings(pluginnameStringsToFetch);\n\n    const descriptionStringsToFetch = [];\n    aiInfo.tools.forEach((tool) => {\n        descriptionStringsToFetch.push({key: 'adddescription', component: 'aitool_' + tool.name});\n    });\n    const descriptionStrings = await getStrings(descriptionStringsToFetch);\n\n    for (let i = 0; i < pluginnameStringsToFetch.length; i++) {\n        toolsContext.push({\n            linklabel: pluginNameStrings[i],\n            addurl: aiInfo.tools[i].addurl,\n            adddescription: descriptionStrings[i],\n        });\n    }\n    const templateContext = {\n        tools: toolsContext\n    };\n    document.getElementById('local_ai_manager-instanceadd_button').addEventListener('click', async() => {\n        const instanceAddModal = await Modal.create({\n            template: 'local_ai_manager/instanceaddmodal',\n            large: true,\n            templateContext\n        });\n        await instanceAddModal.show();\n    });\n};\n"],"names":["async","instanceTable","document","querySelector","instanceTableSelector","aiInfo","dataset","tenant","toolsContext","pluginnameStringsToFetch","tools","forEach","tool","push","key","component","name","pluginNameStrings","descriptionStringsToFetch","descriptionStrings","i","length","linklabel","addurl","adddescription","templateContext","getElementById","addEventListener","instanceAddModal","Modal","create","template","large","show"],"mappings":";;;;;;;;0LA4BsCA,MAAAA,8BAC5BC,cAAgBC,SAASC,cAAcC,uBACvCC,aAAe,qBAAUJ,cAAcK,QAAQC,QAC/CC,aAAe,GACfC,yBAA2B,GACjCJ,OAAOK,MAAMC,SAASC,OAClBH,yBAAyBI,KAAK,CAACC,IAAK,aAAcC,UAAW,UAAYH,KAAKI,gBAE5EC,wBAA0B,mBAAWR,0BAErCS,0BAA4B,GAClCb,OAAOK,MAAMC,SAASC,OAClBM,0BAA0BL,KAAK,CAACC,IAAK,iBAAkBC,UAAW,UAAYH,KAAKI,gBAEjFG,yBAA2B,mBAAWD,+BAEvC,IAAIE,EAAI,EAAGA,EAAIX,yBAAyBY,OAAQD,IACjDZ,aAAaK,KAAK,CACdS,UAAWL,kBAAkBG,GAC7BG,OAAQlB,OAAOK,MAAMU,GAAGG,OACxBC,eAAgBL,mBAAmBC,WAGrCK,gBAAkB,CACpBf,MAAOF,cAEXN,SAASwB,eAAe,uCAAuCC,iBAAiB,SAAS3B,gBAC/E4B,uBAAyBC,eAAMC,OAAO,CACxCC,SAAU,oCACVC,OAAO,EACPP,gBAAAA,wBAEEG,iBAAiBK"}