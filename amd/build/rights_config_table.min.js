define("local_ai_manager/rights_config_table",["exports","core/pending","core/str"],(function(_exports,_pending,_str){var obj;
/**
   * Module handling the form submission of the statistics tables of local_ai_manager.
   *
   * @module     local_ai_manager/rights_config_table
   * @copyright  2024 ISB Bayern
   * @author     Philipp Memmel
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.selectors=_exports.init=void 0,_pending=(obj=_pending)&&obj.__esModule?obj:{default:obj};let table=null;const selectors={CHECKBOX:"input[data-userid]",SELECTALLCHECKBOX:"#rights-table-selectall_checkbox",SELECTIONINFO:"#rights-table-selection_info",USERIDS_INPUT_FIELD:"#rights-table-userids"};_exports.selectors=selectors;_exports.init=id=>{const pendingPromise=new _pending.default("local_ai_manager/rights_config_table");table=document.getElementById(id),table.querySelectorAll(selectors.CHECKBOX).forEach((checkbox=>{checkbox.addEventListener("change",(event=>{updateSelectAllCheckboxState(),updateUserIds(event.target),updateSelectionCountInfo()}))})),table.querySelector(selectors.SELECTALLCHECKBOX).addEventListener("change",(event=>{updateSelection(event),updateUserIds()})),updateSelectionCountInfo(),updateUserIds(),pendingPromise.resolve()};const updateUserIds=()=>{const userIdsInputField=document.querySelector(selectors.USERIDS_INPUT_FIELD),userIds=[];document.querySelectorAll(selectors.CHECKBOX).forEach((checkbox=>{checkbox.checked&&userIds.push(checkbox.dataset.userid)})),userIdsInputField.value=userIds.join(";")},updateSelection=changedEvent=>{const allBoxes=table.querySelectorAll(selectors.CHECKBOX);0!==allBoxes.length&&(changedEvent.target.checked?allBoxes.forEach((box=>{box.checked||(box.checked=!0)})):allBoxes.forEach((box=>{box.checked=!1})),updateSelectionCountInfo())},updateSelectAllCheckboxState=()=>{table.querySelector(selectors.SELECTALLCHECKBOX).checked=!!areAllBoxesChecked()},areAllBoxesChecked=()=>{const allBoxes=table.querySelectorAll(selectors.CHECKBOX);return Array.from(allBoxes).reduce(((a,b)=>a&&b.checked),!0)},updateSelectionCountInfo=async()=>{const selectionCountInfoTarget=table.querySelector(selectors.SELECTIONINFO),infoText=await(0,_str.getString)("selecteduserscount","local_ai_manager",(()=>{const allBoxes=table.querySelectorAll(selectors.CHECKBOX);return Array.from(allBoxes).filter((checkbox=>checkbox.checked)).length})());selectionCountInfoTarget.innerHTML=infoText}}));

//# sourceMappingURL=rights_config_table.min.js.map