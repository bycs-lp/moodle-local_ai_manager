{"version":3,"file":"render_infobox.min.js","sources":["../src/render_infobox.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module handling the form submission of the statistics tables of local_ai_manager.\n *\n * @module     local_ai_manager/render_infobox\n * @copyright  2024 ISB Bayern\n * @author     Philipp Memmel\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Templates from 'core/templates';\nimport LocalStorage from 'core/localstorage';\nimport ModalConfirm from 'local_ai_manager/confirm_modal';\n\n/**\n * Inserts the infobox into the beginning of element with the given selector.\n *\n * Also triggers a confirmation modal the first time it is being rendered by a component.\n *\n * @param {string} component The component name from which this is being called\n * @param {int} userId id of the user\n * @param {string} selector the id of the element to insert the infobox\n * @param {string[]} purposes the purposes which are being used\n */\nexport const renderInfoBox = async(component, userId, selector, purposes) => {\n    const targetElement = document.querySelector(selector);\n    const templateContext = {\n        'purposes': purposes\n    };\n    const {html, js} = await Templates.renderForPromise('local_ai_manager/infobox', templateContext);\n    Templates.prependNodeContents(targetElement, html, js);\n    // We do not want to store the userId in plain text in the local storage, so we hash it.\n    const hashKey = await hash(userId + component);\n    const localStorageContent = LocalStorage.get(hashKey);\n    const currentTime = new Date().getTime();\n    // If the box has not been shown for more than 2 hours, we show it again.\n    if (!localStorageContent || (currentTime - localStorageContent > 120 * 60 * 1000)) {\n        await ModalConfirm.create({});\n        const date = new Date();\n        LocalStorage.set(hashKey, date.getTime());\n    }\n};\n\n/**\n * Hash function to get a hash of a string.\n *\n * @param {string} stringToHash the string to hash\n * @returns {Promise<string>} the promise containing a hex representation of the string encoded by SHA-256\n */\nconst hash = async(stringToHash) => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(stringToHash);\n    const hashAsArrayBuffer = await window.crypto.subtle.digest(\"SHA-256\", data);\n    const uint8ViewOfHash = new Uint8Array(hashAsArrayBuffer);\n    return Array.from(uint8ViewOfHash)\n        .map((b) => b.toString(16).padStart(2, \"0\"))\n        .join(\"\");\n};\n"],"names":["async","component","userId","selector","purposes","targetElement","document","querySelector","templateContext","html","js","Templates","renderForPromise","prependNodeContents","hashKey","hash","localStorageContent","LocalStorage","get","currentTime","Date","getTime","ModalConfirm","create","date","set","data","TextEncoder","encode","stringToHash","hashAsArrayBuffer","window","crypto","subtle","digest","uint8ViewOfHash","Uint8Array","Array","from","map","b","toString","padStart","join"],"mappings":";;;;;;;;kJAsC6BA,MAAMC,UAAWC,OAAQC,SAAUC,kBACtDC,cAAgBC,SAASC,cAAcJ,UACvCK,gBAAkB,UACRJ,WAEVK,KAACA,KAADC,GAAOA,UAAYC,UAAUC,iBAAiB,2BAA4BJ,iBAChFG,UAAUE,oBAAoBR,cAAeI,KAAMC,UAE7CI,cAAgBC,KAAKb,OAASD,WAC9Be,oBAAsBC,sBAAaC,IAAIJ,SACvCK,aAAc,IAAIC,MAAOC,cAE1BL,qBAAwBG,YAAcH,oBAAsB,KAAkB,OACzEM,uBAAaC,OAAO,UACpBC,KAAO,IAAIJ,2BACJK,IAAIX,QAASU,KAAKH,mBAUjCN,KAAOf,MAAAA,qBAEH0B,MADU,IAAIC,aACCC,OAAOC,cACtBC,wBAA0BC,OAAOC,OAAOC,OAAOC,OAAO,UAAWR,MACjES,gBAAkB,IAAIC,WAAWN,0BAChCO,MAAMC,KAAKH,iBACbI,KAAKC,GAAMA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OACtCC,KAAK"}